type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | NAT of (Support.Error.info)
  | ADD of (Support.Error.info)
  | SUB of (Support.Error.info)
  | MUL of (Support.Error.info)
  | DIV of (Support.Error.info)
  | INV of (Support.Error.info)
  | RANGE of (Support.Error.info)
  | SETPRECISION of (Support.Error.info)
  | ROUND of (Support.Error.info)
  | UP of (Support.Error.info)
  | DOWN of (Support.Error.info)
  | LESS of (Support.Error.info)
  | TORANGE of (Support.Error.info)
  | URANGE of (Support.Error.info)
  | UFRAC of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | FRACV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 98 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* TBOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* FIX *);
  271 (* LETREC *);
  272 (* CASE *);
  273 (* OF *);
  274 (* AS *);
  275 (* USTRING *);
  276 (* UNIT *);
  277 (* REF *);
  278 (* UUNIT *);
  279 (* RREF *);
  280 (* TIMESFLOAT *);
  281 (* SUCC *);
  282 (* PRED *);
  283 (* ISZERO *);
  284 (* UFLOAT *);
  285 (* SSOURCE *);
  286 (* SSINK *);
  287 (* NAT *);
  288 (* ADD *);
  289 (* SUB *);
  290 (* MUL *);
  291 (* DIV *);
  292 (* INV *);
  293 (* RANGE *);
  294 (* SETPRECISION *);
  295 (* ROUND *);
  296 (* UP *);
  297 (* DOWN *);
  298 (* LESS *);
  299 (* TORANGE *);
  300 (* URANGE *);
  301 (* UFRAC *);
  302 (* UCID *);
  303 (* LCID *);
  304 (* INTV *);
  305 (* FLOATV *);
  306 (* STRINGV *);
  307 (* FRACV *);
  308 (* APOSTROPHE *);
  309 (* DQUOTE *);
  310 (* ARROW *);
  311 (* BANG *);
  312 (* BARGT *);
  313 (* BARRCURLY *);
  314 (* BARRSQUARE *);
  315 (* COLON *);
  316 (* COLONCOLON *);
  317 (* COLONEQ *);
  318 (* COLONHASH *);
  319 (* COMMA *);
  320 (* DARROW *);
  321 (* DDARROW *);
  322 (* DOT *);
    0 (* EOF *);
  323 (* EQ *);
  324 (* EQEQ *);
  325 (* EXISTS *);
  326 (* GT *);
  327 (* HASH *);
  328 (* LCURLY *);
  329 (* LCURLYBAR *);
  330 (* LEFTARROW *);
  331 (* LPAREN *);
  332 (* LSQUARE *);
  333 (* LSQUAREBAR *);
  334 (* LT *);
  335 (* RCURLY *);
  336 (* RPAREN *);
  337 (* RSQUARE *);
  338 (* SEMI *);
  339 (* SLASH *);
  340 (* STAR *);
  341 (* TRIANGLE *);
  342 (* USCORE *);
  343 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\006\000\006\000\006\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\004\000\004\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\012\000\012\000\012\000\009\000\009\000\014\000\014\000\
\015\000\015\000\013\000\013\000\017\000\017\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\018\000\018\000\019\000\019\000\020\000\020\000\
\011\000\011\000\021\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\002\000\002\000\002\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\003\000\001\000\001\000\006\000\006\000\006\000\
\006\000\006\000\008\000\004\000\003\000\001\000\002\000\002\000\
\002\000\002\000\003\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\003\000\001\000\000\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\003\000\003\000\004\000\
\001\000\001\000\001\000\003\000\007\000\001\000\001\000\001\000\
\001\000\001\000\000\000\001\000\001\000\003\000\003\000\001\000\
\001\000\003\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\075\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\080\000\
\078\000\082\000\000\000\001\000\000\000\000\000\000\000\092\000\
\000\000\003\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\005\000\000\000\000\000\088\000\
\000\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\015\000\016\000\019\000\020\000\
\000\000\021\000\000\000\000\000\022\000\023\000\024\000\013\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\006\000\007\000\000\000\076\000\000\000\000\000\071\000\000\000\
\002\000\000\000\058\000\059\000\067\000\009\000\010\000\011\000\
\000\000\066\000\000\000\062\000\000\000\000\000\000\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\087\000\086\000\070\000\000\000\000\000\017\000\
\000\000\012\000\018\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\064\000\030\000\
\031\000\032\000\033\000\034\000\000\000\000\000\090\000\000\000\
\000\000\000\000\077\000\035\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\040\000\041\000\042\000\074\000\077\000\146\000\109\000\110\000\
\147\000\043\000\161\000\044\000\045\000\148\000\149\000\046\000\
\085\000\081\000\082\000\083\000\162\000"

let yysindex = "\024\000\
\001\000\000\000\220\254\212\254\166\004\000\000\000\000\237\254\
\040\005\241\254\166\004\000\000\040\005\040\005\040\005\040\005\
\040\005\040\005\040\005\040\005\040\005\040\005\040\005\040\005\
\040\005\040\005\040\005\040\005\232\254\224\254\000\000\000\000\
\000\000\000\000\040\005\000\000\231\004\166\004\253\254\000\000\
\219\254\000\000\021\255\236\254\000\000\029\255\191\005\248\254\
\249\254\000\000\051\255\254\254\006\255\236\254\015\255\058\255\
\236\254\075\005\236\254\236\254\236\254\075\005\075\005\075\005\
\075\005\236\254\075\005\075\005\075\005\075\005\075\005\236\254\
\191\005\000\000\191\005\166\004\000\000\236\254\009\255\000\000\
\255\254\000\000\014\255\001\255\000\255\012\255\001\000\031\005\
\236\254\229\254\191\005\000\000\000\000\000\000\000\000\000\000\
\228\005\000\000\228\005\228\005\000\000\000\000\000\000\000\000\
\153\005\191\005\153\005\003\255\000\000\031\255\191\005\191\005\
\166\004\166\004\166\004\191\005\010\255\236\254\236\254\236\254\
\236\254\236\254\236\254\236\254\236\254\236\254\236\254\000\000\
\000\000\000\000\166\004\000\000\231\004\166\004\000\000\166\004\
\000\000\040\005\000\000\000\000\000\000\000\000\000\000\000\000\
\030\255\000\000\011\255\000\000\032\255\017\255\022\255\000\000\
\228\005\028\255\034\255\091\255\088\255\090\255\038\255\059\255\
\000\000\020\255\000\000\000\000\000\000\043\255\191\005\000\000\
\153\005\000\000\000\000\000\000\166\004\166\004\166\004\166\004\
\166\004\166\004\047\255\010\255\098\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\255\071\255\000\000\191\005\
\166\004\053\255\000\000\000\000\056\255\031\005\040\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\255\146\255\000\000\000\000\
\000\000\000\000\000\000\000\000\046\255\000\000\000\000\000\000\
\000\000\000\000\073\004\102\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\153\000\000\000\000\000\
\204\000\000\000\255\000\050\001\101\001\000\000\000\000\000\000\
\000\000\152\001\000\000\000\000\000\000\000\000\000\000\203\001\
\000\000\000\000\000\000\000\000\000\000\254\001\098\004\000\000\
\000\000\000\000\048\255\050\255\000\000\000\000\000\000\000\000\
\049\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\255\000\000\061\255\000\000\000\000\102\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\100\002\151\002\202\002\
\253\002\048\003\099\003\150\003\201\003\252\003\047\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\205\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\004"

let yygindex = "\000\000\
\039\000\000\000\026\000\000\000\000\000\231\255\235\255\195\255\
\027\000\170\255\209\255\247\255\000\000\222\255\000\000\000\000\
\002\000\000\000\004\000\000\000\000\000"

let yytablesize = 1842
let yytable = "\054\000\
\036\000\138\000\048\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\139\000\140\000\108\000\003\000\063\000\
\001\000\078\000\075\000\052\000\006\000\007\000\051\000\055\000\
\063\000\089\000\076\000\142\000\056\000\143\000\144\000\047\000\
\012\000\049\000\073\000\086\000\087\000\090\000\091\000\128\000\
\118\000\129\000\111\000\112\000\119\000\120\000\121\000\122\000\
\113\000\123\000\124\000\125\000\126\000\127\000\080\000\084\000\
\114\000\141\000\053\000\050\000\031\000\032\000\033\000\034\000\
\115\000\116\000\117\000\131\000\133\000\132\000\136\000\135\000\
\150\000\088\000\134\000\152\000\153\000\154\000\155\000\160\000\
\167\000\168\000\159\000\171\000\037\000\173\000\169\000\038\000\
\170\000\175\000\039\000\174\000\176\000\130\000\177\000\028\000\
\178\000\179\000\180\000\028\000\028\000\028\000\028\000\199\000\
\181\000\190\000\028\000\192\000\193\000\194\000\028\000\028\000\
\198\000\028\000\197\000\025\000\083\000\137\000\085\000\061\000\
\089\000\069\000\061\000\172\000\191\000\151\000\183\000\165\000\
\164\000\000\000\156\000\157\000\158\000\182\000\000\000\000\000\
\000\000\000\000\000\000\073\000\028\000\028\000\028\000\028\000\
\028\000\073\000\073\000\000\000\163\000\000\000\080\000\084\000\
\000\000\166\000\028\000\073\000\028\000\073\000\195\000\028\000\
\028\000\000\000\000\000\028\000\000\000\028\000\000\000\000\000\
\028\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\028\000\089\000\000\000\000\000\
\073\000\073\000\073\000\073\000\073\000\000\000\184\000\185\000\
\186\000\187\000\188\000\189\000\000\000\000\000\073\000\000\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\073\000\196\000\000\000\073\000\000\000\000\000\073\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\006\000\007\000\000\000\000\000\008\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\014\000\015\000\016\000\017\000\000\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\000\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\068\000\000\000\000\000\035\000\
\068\000\068\000\068\000\068\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\068\000\000\000\000\000\068\000\000\000\
\037\000\000\000\000\000\038\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\068\000\068\000\068\000\068\000\000\000\038\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\068\000\
\000\000\068\000\038\000\000\000\068\000\000\000\038\000\000\000\
\068\000\038\000\068\000\000\000\000\000\068\000\000\000\000\000\
\068\000\068\000\068\000\000\000\068\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\000\000\040\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\038\000\000\000\038\000\040\000\000\000\000\000\
\000\000\040\000\000\000\038\000\040\000\038\000\000\000\000\000\
\038\000\000\000\000\000\038\000\038\000\038\000\000\000\038\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\000\000\041\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\040\000\000\000\040\000\
\041\000\000\000\000\000\000\000\041\000\000\000\040\000\041\000\
\040\000\000\000\000\000\040\000\000\000\000\000\040\000\040\000\
\040\000\000\000\040\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\000\000\
\044\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\041\000\000\000\041\000\044\000\000\000\000\000\000\000\044\000\
\000\000\041\000\044\000\041\000\000\000\000\000\041\000\000\000\
\000\000\041\000\041\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\000\000\045\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\044\000\000\000\044\000\045\000\000\000\
\000\000\000\000\045\000\000\000\044\000\045\000\044\000\000\000\
\000\000\044\000\000\000\000\000\044\000\044\000\044\000\000\000\
\044\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\000\000\046\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\045\000\000\000\
\045\000\046\000\000\000\000\000\000\000\046\000\000\000\045\000\
\046\000\045\000\000\000\000\000\045\000\000\000\000\000\045\000\
\045\000\045\000\000\000\045\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\000\000\051\000\000\000\000\000\000\000\051\000\051\000\051\000\
\051\000\046\000\000\000\046\000\051\000\000\000\000\000\000\000\
\051\000\000\000\046\000\051\000\046\000\000\000\000\000\046\000\
\000\000\000\000\046\000\046\000\046\000\000\000\046\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\051\000\
\051\000\051\000\051\000\000\000\057\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\051\000\000\000\051\000\057\000\
\000\000\000\000\000\000\057\000\000\000\051\000\057\000\051\000\
\000\000\000\000\051\000\000\000\000\000\051\000\051\000\051\000\
\000\000\051\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\000\000\042\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\057\000\
\000\000\057\000\042\000\000\000\000\000\000\000\042\000\000\000\
\057\000\042\000\057\000\000\000\000\000\057\000\000\000\000\000\
\057\000\057\000\057\000\000\000\057\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\000\000\039\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\042\000\000\000\042\000\039\000\000\000\000\000\
\000\000\039\000\000\000\042\000\039\000\042\000\000\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\000\000\042\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\000\000\043\000\000\000\000\000\
\000\000\043\000\043\000\043\000\043\000\039\000\000\000\039\000\
\043\000\000\000\000\000\000\000\043\000\000\000\039\000\043\000\
\039\000\000\000\000\000\039\000\000\000\000\000\039\000\039\000\
\039\000\000\000\039\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\000\000\
\047\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\
\043\000\000\000\043\000\047\000\000\000\000\000\000\000\047\000\
\000\000\043\000\047\000\043\000\000\000\000\000\043\000\000\000\
\000\000\043\000\043\000\043\000\000\000\043\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\000\000\048\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\047\000\000\000\047\000\048\000\000\000\
\000\000\000\000\048\000\000\000\047\000\048\000\047\000\000\000\
\000\000\047\000\000\000\000\000\047\000\047\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\000\000\049\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\048\000\000\000\
\048\000\049\000\000\000\000\000\000\000\049\000\000\000\048\000\
\049\000\048\000\000\000\000\000\048\000\000\000\000\000\048\000\
\048\000\048\000\000\000\048\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\000\000\050\000\000\000\000\000\000\000\050\000\050\000\050\000\
\050\000\049\000\000\000\049\000\050\000\000\000\000\000\000\000\
\050\000\000\000\049\000\050\000\049\000\000\000\000\000\049\000\
\000\000\000\000\049\000\049\000\049\000\000\000\049\000\000\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\000\000\053\000\000\000\000\000\000\000\
\053\000\053\000\053\000\053\000\050\000\000\000\050\000\053\000\
\000\000\000\000\000\000\053\000\000\000\050\000\053\000\050\000\
\000\000\000\000\050\000\000\000\000\000\050\000\050\000\050\000\
\000\000\050\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\053\000\053\000\053\000\053\000\000\000\054\000\
\000\000\000\000\000\000\054\000\054\000\054\000\054\000\053\000\
\000\000\053\000\054\000\000\000\000\000\000\000\054\000\000\000\
\053\000\054\000\053\000\000\000\000\000\053\000\000\000\000\000\
\053\000\053\000\053\000\000\000\053\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\000\000\055\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\054\000\000\000\054\000\055\000\000\000\000\000\
\000\000\055\000\000\000\054\000\055\000\054\000\000\000\000\000\
\054\000\000\000\000\000\054\000\054\000\054\000\000\000\054\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\000\000\056\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\055\000\000\000\055\000\
\056\000\000\000\000\000\000\000\056\000\000\000\055\000\056\000\
\055\000\000\000\000\000\055\000\000\000\000\000\055\000\055\000\
\055\000\000\000\055\000\091\000\091\000\000\000\000\000\055\000\
\000\000\000\000\091\000\000\000\000\000\000\000\091\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\000\000\
\052\000\000\000\000\000\000\000\052\000\052\000\052\000\052\000\
\056\000\000\000\056\000\052\000\000\000\000\000\000\000\052\000\
\000\000\056\000\052\000\056\000\000\000\000\000\056\000\000\000\
\000\000\056\000\056\000\056\000\000\000\056\000\029\000\029\000\
\000\000\000\000\056\000\000\000\091\000\029\000\000\000\000\000\
\000\000\029\000\000\000\091\000\000\000\052\000\052\000\052\000\
\052\000\052\000\000\000\073\000\091\000\091\000\000\000\091\000\
\000\000\073\000\073\000\052\000\091\000\052\000\000\000\000\000\
\000\000\000\000\000\000\073\000\052\000\073\000\052\000\000\000\
\000\000\052\000\000\000\000\000\052\000\052\000\052\000\000\000\
\052\000\000\000\000\000\000\000\000\000\052\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\073\000\073\000\073\000\073\000\073\000\000\000\000\000\029\000\
\029\000\000\000\029\000\000\000\000\000\000\000\073\000\000\000\
\073\000\000\000\000\000\073\000\000\000\000\000\000\000\003\000\
\004\000\073\000\005\000\000\000\073\000\006\000\007\000\073\000\
\073\000\008\000\000\000\009\000\010\000\011\000\000\000\000\000\
\000\000\012\000\013\000\000\000\000\000\014\000\015\000\016\000\
\017\000\000\000\000\000\000\000\000\000\018\000\019\000\020\000\
\021\000\022\000\000\000\023\000\024\000\025\000\026\000\027\000\
\028\000\000\000\037\000\037\000\050\000\031\000\032\000\033\000\
\034\000\037\000\000\000\000\000\035\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\005\000\000\000\037\000\006\000\007\000\
\038\000\000\000\008\000\039\000\009\000\010\000\011\000\000\000\
\000\000\000\000\012\000\013\000\000\000\000\000\014\000\015\000\
\016\000\017\000\000\000\000\000\000\000\000\000\018\000\019\000\
\020\000\021\000\022\000\037\000\023\000\024\000\025\000\026\000\
\027\000\028\000\037\000\000\000\000\000\079\000\031\000\032\000\
\033\000\034\000\000\000\037\000\037\000\035\000\037\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\006\000\007\000\
\000\000\003\000\000\000\000\000\009\000\000\000\037\000\006\000\
\007\000\038\000\012\000\013\000\039\000\000\000\014\000\015\000\
\016\000\017\000\000\000\012\000\000\000\000\000\018\000\019\000\
\020\000\021\000\022\000\000\000\023\000\024\000\025\000\026\000\
\027\000\028\000\000\000\000\000\003\000\050\000\031\000\032\000\
\033\000\034\000\006\000\007\000\000\000\035\000\050\000\031\000\
\032\000\033\000\034\000\000\000\000\000\000\000\012\000\000\000\
\089\000\089\000\000\000\000\000\000\000\000\000\037\000\089\000\
\000\000\038\000\000\000\089\000\039\000\000\000\000\000\037\000\
\000\000\000\000\038\000\000\000\000\000\039\000\000\000\000\000\
\000\000\050\000\031\000\032\000\033\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\090\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\038\000\000\000\000\000\
\039\000\089\000\000\000\000\000\092\000\000\000\000\000\000\000\
\089\000\000\000\093\000\094\000\000\000\000\000\000\000\000\000\
\000\000\089\000\089\000\095\000\089\000\000\000\096\000\097\000\
\000\000\000\000\000\000\000\000\098\000\099\000\100\000\101\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\000\000\000\102\000\103\000\104\000\145\000\
\093\000\094\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\095\000\000\000\000\000\096\000\097\000\000\000\000\000\
\000\000\000\000\098\000\099\000\100\000\101\000\000\000\000\000\
\105\000\000\000\000\000\106\000\000\000\000\000\107\000\092\000\
\000\000\000\000\102\000\103\000\104\000\093\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\098\000\
\000\000\000\000\101\000\000\000\000\000\000\000\105\000\000\000\
\000\000\106\000\000\000\000\000\107\000\000\000\000\000\102\000\
\103\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\105\000\000\000\000\000\106\000\000\000\
\000\000\107\000"

let yycheck = "\009\000\
\000\000\088\000\047\001\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\047\001\048\001\047\000\002\001\070\001\
\001\000\035\000\059\001\047\001\008\001\009\001\005\000\047\001\
\079\001\043\000\067\001\097\000\011\000\099\000\100\000\076\001\
\020\001\086\001\067\001\047\001\082\001\066\001\018\001\073\000\
\058\000\075\000\059\001\059\001\062\000\063\000\064\000\065\000\
\006\001\067\000\068\000\069\000\070\000\071\000\037\000\038\000\
\067\001\091\000\086\001\047\001\048\001\049\001\050\001\051\001\
\067\001\059\001\017\001\067\001\063\001\079\001\067\001\080\001\
\106\000\061\001\082\001\081\001\054\001\111\000\112\000\078\001\
\059\001\079\001\116\000\070\001\072\001\066\001\063\001\075\001\
\080\001\007\001\078\001\066\001\013\001\076\000\013\001\002\001\
\067\001\047\001\087\001\006\001\007\001\008\001\009\001\198\000\
\070\001\067\001\013\001\018\001\013\001\047\001\017\001\018\001\
\065\001\020\001\070\001\082\001\079\001\087\000\079\001\079\001\
\138\000\080\001\070\001\153\000\180\000\107\000\169\000\134\000\
\133\000\255\255\113\000\114\000\115\000\167\000\255\255\255\255\
\255\255\255\255\255\255\002\001\047\001\048\001\049\001\050\001\
\051\001\008\001\009\001\255\255\131\000\255\255\133\000\134\000\
\255\255\136\000\061\001\018\001\063\001\020\001\192\000\066\001\
\067\001\255\255\255\255\070\001\255\255\072\001\255\255\255\255\
\075\001\255\255\255\255\078\001\079\001\080\001\081\001\082\001\
\255\255\255\255\255\255\255\255\087\001\199\000\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\255\255\173\000\174\000\
\175\000\176\000\177\000\178\000\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\255\255\255\255\
\255\255\072\001\193\000\255\255\075\001\255\255\255\255\078\001\
\255\255\255\255\255\255\082\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\002\001\255\255\255\255\055\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\255\255\
\072\001\255\255\255\255\075\001\255\255\255\255\078\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\061\001\
\255\255\063\001\013\001\255\255\066\001\255\255\017\001\255\255\
\070\001\020\001\072\001\255\255\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\255\255\082\001\255\255\255\255\255\255\
\255\255\087\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\255\255\002\001\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\061\001\255\255\063\001\013\001\255\255\255\255\
\255\255\017\001\255\255\070\001\020\001\072\001\255\255\255\255\
\075\001\255\255\255\255\078\001\079\001\080\001\255\255\082\001\
\255\255\255\255\255\255\255\255\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\061\001\255\255\063\001\
\013\001\255\255\255\255\255\255\017\001\255\255\070\001\020\001\
\072\001\255\255\255\255\075\001\255\255\255\255\078\001\079\001\
\080\001\255\255\082\001\255\255\255\255\255\255\255\255\087\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\255\255\
\002\001\255\255\255\255\255\255\006\001\007\001\008\001\009\001\
\061\001\255\255\063\001\013\001\255\255\255\255\255\255\017\001\
\255\255\070\001\020\001\072\001\255\255\255\255\075\001\255\255\
\255\255\078\001\079\001\080\001\255\255\082\001\255\255\255\255\
\255\255\255\255\087\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\061\001\255\255\063\001\013\001\255\255\
\255\255\255\255\017\001\255\255\070\001\020\001\072\001\255\255\
\255\255\075\001\255\255\255\255\078\001\079\001\080\001\255\255\
\082\001\255\255\255\255\255\255\255\255\087\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\255\255\002\001\255\255\
\255\255\255\255\006\001\007\001\008\001\009\001\061\001\255\255\
\063\001\013\001\255\255\255\255\255\255\017\001\255\255\070\001\
\020\001\072\001\255\255\255\255\075\001\255\255\255\255\078\001\
\079\001\080\001\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\061\001\255\255\063\001\013\001\255\255\255\255\255\255\
\017\001\255\255\070\001\020\001\072\001\255\255\255\255\075\001\
\255\255\255\255\078\001\079\001\080\001\255\255\082\001\255\255\
\255\255\255\255\255\255\087\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\255\255\002\001\255\255\255\255\255\255\
\006\001\007\001\008\001\009\001\061\001\255\255\063\001\013\001\
\255\255\255\255\255\255\017\001\255\255\070\001\020\001\072\001\
\255\255\255\255\075\001\255\255\255\255\078\001\079\001\080\001\
\255\255\082\001\255\255\255\255\255\255\255\255\087\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\061\001\
\255\255\063\001\013\001\255\255\255\255\255\255\017\001\255\255\
\070\001\020\001\072\001\255\255\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\255\255\082\001\255\255\255\255\255\255\
\255\255\087\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\255\255\002\001\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\061\001\255\255\063\001\013\001\255\255\255\255\
\255\255\017\001\255\255\070\001\020\001\072\001\255\255\255\255\
\075\001\255\255\255\255\078\001\079\001\080\001\255\255\082\001\
\255\255\255\255\255\255\255\255\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\061\001\255\255\063\001\
\013\001\255\255\255\255\255\255\017\001\255\255\070\001\020\001\
\072\001\255\255\255\255\075\001\255\255\255\255\078\001\079\001\
\080\001\255\255\082\001\255\255\255\255\255\255\255\255\087\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\255\255\
\002\001\255\255\255\255\255\255\006\001\007\001\008\001\009\001\
\061\001\255\255\063\001\013\001\255\255\255\255\255\255\017\001\
\255\255\070\001\020\001\072\001\255\255\255\255\075\001\255\255\
\255\255\078\001\079\001\080\001\255\255\082\001\255\255\255\255\
\255\255\255\255\087\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\061\001\255\255\063\001\013\001\255\255\
\255\255\255\255\017\001\255\255\070\001\020\001\072\001\255\255\
\255\255\075\001\255\255\255\255\078\001\079\001\080\001\255\255\
\082\001\255\255\255\255\255\255\255\255\087\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\255\255\002\001\255\255\
\255\255\255\255\006\001\007\001\008\001\009\001\061\001\255\255\
\063\001\013\001\255\255\255\255\255\255\017\001\255\255\070\001\
\020\001\072\001\255\255\255\255\075\001\255\255\255\255\078\001\
\079\001\080\001\255\255\082\001\255\255\255\255\255\255\255\255\
\087\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\061\001\255\255\063\001\013\001\255\255\255\255\255\255\
\017\001\255\255\070\001\020\001\072\001\255\255\255\255\075\001\
\255\255\255\255\078\001\079\001\080\001\255\255\082\001\255\255\
\255\255\255\255\255\255\087\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\255\255\002\001\255\255\255\255\255\255\
\006\001\007\001\008\001\009\001\061\001\255\255\063\001\013\001\
\255\255\255\255\255\255\017\001\255\255\070\001\020\001\072\001\
\255\255\255\255\075\001\255\255\255\255\078\001\079\001\080\001\
\255\255\082\001\255\255\255\255\255\255\255\255\087\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\061\001\
\255\255\063\001\013\001\255\255\255\255\255\255\017\001\255\255\
\070\001\020\001\072\001\255\255\255\255\075\001\255\255\255\255\
\078\001\079\001\080\001\255\255\082\001\255\255\255\255\255\255\
\255\255\087\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\255\255\002\001\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\061\001\255\255\063\001\013\001\255\255\255\255\
\255\255\017\001\255\255\070\001\020\001\072\001\255\255\255\255\
\075\001\255\255\255\255\078\001\079\001\080\001\255\255\082\001\
\255\255\255\255\255\255\255\255\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\061\001\255\255\063\001\
\013\001\255\255\255\255\255\255\017\001\255\255\070\001\020\001\
\072\001\255\255\255\255\075\001\255\255\255\255\078\001\079\001\
\080\001\255\255\082\001\006\001\007\001\255\255\255\255\087\001\
\255\255\255\255\013\001\255\255\255\255\255\255\017\001\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\255\255\
\002\001\255\255\255\255\255\255\006\001\007\001\008\001\009\001\
\061\001\255\255\063\001\013\001\255\255\255\255\255\255\017\001\
\255\255\070\001\020\001\072\001\255\255\255\255\075\001\255\255\
\255\255\078\001\079\001\080\001\255\255\082\001\006\001\007\001\
\255\255\255\255\087\001\255\255\063\001\013\001\255\255\255\255\
\255\255\017\001\255\255\070\001\255\255\047\001\048\001\049\001\
\050\001\051\001\255\255\002\001\079\001\080\001\255\255\082\001\
\255\255\008\001\009\001\061\001\087\001\063\001\255\255\255\255\
\255\255\255\255\255\255\018\001\070\001\020\001\072\001\255\255\
\255\255\075\001\255\255\255\255\078\001\079\001\080\001\255\255\
\082\001\255\255\255\255\255\255\255\255\087\001\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\255\255\070\001\255\255\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\079\001\
\080\001\255\255\082\001\255\255\255\255\255\255\061\001\255\255\
\063\001\255\255\255\255\066\001\255\255\255\255\255\255\002\001\
\003\001\072\001\005\001\255\255\075\001\008\001\009\001\078\001\
\079\001\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\006\001\007\001\047\001\048\001\049\001\050\001\
\051\001\013\001\255\255\255\255\055\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\005\001\255\255\072\001\008\001\009\001\
\075\001\255\255\012\001\078\001\014\001\015\001\016\001\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\063\001\038\001\039\001\040\001\041\001\
\042\001\043\001\070\001\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\255\255\079\001\080\001\055\001\082\001\255\255\
\002\001\255\255\255\255\255\255\255\255\255\255\008\001\009\001\
\255\255\002\001\255\255\255\255\014\001\255\255\072\001\008\001\
\009\001\075\001\020\001\021\001\078\001\255\255\024\001\025\001\
\026\001\027\001\255\255\020\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\002\001\047\001\048\001\049\001\
\050\001\051\001\008\001\009\001\255\255\055\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\255\255\020\001\255\255\
\006\001\007\001\255\255\255\255\255\255\255\255\072\001\013\001\
\255\255\075\001\255\255\017\001\078\001\255\255\255\255\072\001\
\255\255\255\255\075\001\255\255\255\255\078\001\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\255\255\255\255\
\255\255\255\255\072\001\255\255\255\255\075\001\255\255\255\255\
\078\001\063\001\255\255\255\255\004\001\255\255\255\255\255\255\
\070\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\079\001\080\001\019\001\082\001\255\255\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\255\255\044\001\045\001\046\001\047\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\255\255\
\072\001\255\255\255\255\075\001\255\255\255\255\078\001\004\001\
\255\255\255\255\044\001\045\001\046\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\031\001\255\255\255\255\255\255\072\001\255\255\
\255\255\075\001\255\255\255\255\078\001\255\255\255\255\044\001\
\045\001\046\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\072\001\255\255\255\255\075\001\255\255\
\255\255\078\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TBOT\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  CASE\000\
  OF\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  TIMESFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  NAT\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  INV\000\
  RANGE\000\
  SETPRECISION\000\
  ROUND\000\
  UP\000\
  DOWN\000\
  LESS\000\
  TORANGE\000\
  URANGE\000\
  UFRAC\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  FRACV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 150 "parser.mly"
      ( fun ctx -> [],ctx )
# 880 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 152 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 892 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 160 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 899 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 162 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 907 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 164 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 915 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 169 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 923 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 171 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 931 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 176 "parser.mly"
                ( _1 )
# 938 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 178 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 946 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 180 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 954 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 182 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 962 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 187 "parser.mly"
           ( _2 )
# 971 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 189 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 982 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 195 "parser.mly"
      ( fun ctx -> TyTop )
# 989 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 197 "parser.mly"
      ( fun ctx -> TyBool )
# 996 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 199 "parser.mly"
      ( fun ctx -> TyBot )
# 1003 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 201 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 1013 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 204 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 1023 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 207 "parser.mly"
      ( fun ctx -> TyString )
# 1030 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 209 "parser.mly"
      ( fun ctx -> TyUnit )
# 1037 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 211 "parser.mly"
      ( fun ctx -> TyFloat )
# 1044 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 213 "parser.mly"
      ( fun ctx -> TyNat )
# 1051 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 215 "parser.mly"
      ( fun ctx -> TyRange )
# 1058 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 217 "parser.mly"
      ( fun ctx -> TyFrac )
# 1065 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1071 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 223 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1079 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 229 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 1088 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 231 "parser.mly"
            ( _1 )
# 1095 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 235 "parser.mly"
      ( _1 )
# 1102 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 237 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 1116 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 241 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 1130 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 245 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1142 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 247 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1154 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 249 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1166 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 251 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1183 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 256 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1194 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1203 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 263 "parser.mly"
      ( _1 )
# 1210 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1221 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 270 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1230 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1238 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 275 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1246 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1255 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 279 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1263 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1271 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1279 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx -> TmAdd(_1, _2 ctx, _3 ctx, 8) )
# 1288 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx -> TmSub(_1, _2 ctx, _3 ctx, 8) )
# 1297 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 289 "parser.mly"
      ( fun ctx -> TmMul(_1, _2 ctx, _3 ctx, 8) )
# 1306 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx -> TmDiv(_1, _2 ctx, _3 ctx, 8) )
# 1315 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 293 "parser.mly"
      ( fun ctx -> TmInv(_1, _2 ctx, 8) )
# 1323 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx -> TmLess(_1, _2 ctx, _3 ctx) )
# 1332 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 297 "parser.mly"
      ( fun ctx -> TmSetprecision(_1, _2 ctx, _3 ctx) )
# 1341 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 299 "parser.mly"
      ( fun ctx -> TmRound(_1, _2 ctx, _3 ctx) )
# 1350 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 301 "parser.mly"
      ( fun ctx -> TmUp(_1, _2 ctx, _3 ctx) )
# 1359 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx -> TmDown(_1, _2 ctx, _3 ctx) )
# 1368 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 305 "parser.mly"
      ( fun ctx -> TmTorange(_1, _2 ctx) )
# 1376 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1386 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 312 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1396 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 315 "parser.mly"
      ( _1 )
# 1403 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx i -> [] )
# 1409 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 321 "parser.mly"
      ( _1 )
# 1416 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 325 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1423 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 327 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1432 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 331 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1441 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 333 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1448 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 337 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1457 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 339 "parser.mly"
      ( _1 )
# 1464 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 343 "parser.mly"
      ( _1 )
# 1471 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 345 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1481 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 351 "parser.mly"
      ( _2 )
# 1490 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 353 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1500 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 355 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1508 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 358 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1515 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1522 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 362 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1532 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 365 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1546 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 368 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1553 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 370 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1560 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 372 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1567 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 374 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1578 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 381 "parser.mly"
      ( fun ctx ->
          let f s =
            let l = String.length s in
            let d = String.index s '.' in
            let ints = String.concat "" [String.sub s 0 d; String.sub s (d+1) (l-d-1)] in
            let w = ref 0 in
            while (!w<(l-1) && ((String.get ints !w)='0')) do
                w:=((!w)+1);
            done;
            if !w=(l-1) then let a = Array.make 1 0 in let fr = TmFrac(_1.i, 1, 0, 1, a) in TmRange(_1.i, fr, fr, TmUnit(_1.i))
            else let l'=l-1 - (!w) in
            let a = Array.make l' 0 in
            for i = 0 to (l'-1) do
                a.(i) <- (int_of_char (String.get ints (l-2-i)) - 48)
            done;
            let fr = TmFrac(_1.i, 1, l-1-d, l', a) in TmRange(_1.i, fr, fr, TmUnit(_1.i))
          in f _1.v
      )
# 1602 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "parser.mly"
      ( fun ctx i -> [] )
# 1608 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 404 "parser.mly"
      ( _1 )
# 1615 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 408 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1622 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 410 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1631 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 414 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1640 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 416 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1647 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 420 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1654 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 422 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1663 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 426 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1678 "parser.ml"
               : 'Case))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
