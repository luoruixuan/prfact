type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | NAT of (Support.Error.info)
  | ADD of (Support.Error.info)
  | SUB of (Support.Error.info)
  | MUL of (Support.Error.info)
  | DIV of (Support.Error.info)
  | INV of (Support.Error.info)
  | RANGE of (Support.Error.info)
  | SETPRECISION of (Support.Error.info)
  | ROUND of (Support.Error.info)
  | UP of (Support.Error.info)
  | DOWN of (Support.Error.info)
  | LESS of (Support.Error.info)
  | URANGE of (Support.Error.info)
  | UFRAC of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | FRACV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 97 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* TBOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* FIX *);
  271 (* LETREC *);
  272 (* CASE *);
  273 (* OF *);
  274 (* AS *);
  275 (* USTRING *);
  276 (* UNIT *);
  277 (* REF *);
  278 (* UUNIT *);
  279 (* RREF *);
  280 (* TIMESFLOAT *);
  281 (* SUCC *);
  282 (* PRED *);
  283 (* ISZERO *);
  284 (* UFLOAT *);
  285 (* SSOURCE *);
  286 (* SSINK *);
  287 (* NAT *);
  288 (* ADD *);
  289 (* SUB *);
  290 (* MUL *);
  291 (* DIV *);
  292 (* INV *);
  293 (* RANGE *);
  294 (* SETPRECISION *);
  295 (* ROUND *);
  296 (* UP *);
  297 (* DOWN *);
  298 (* LESS *);
  299 (* URANGE *);
  300 (* UFRAC *);
  301 (* UCID *);
  302 (* LCID *);
  303 (* INTV *);
  304 (* FLOATV *);
  305 (* STRINGV *);
  306 (* FRACV *);
  307 (* APOSTROPHE *);
  308 (* DQUOTE *);
  309 (* ARROW *);
  310 (* BANG *);
  311 (* BARGT *);
  312 (* BARRCURLY *);
  313 (* BARRSQUARE *);
  314 (* COLON *);
  315 (* COLONCOLON *);
  316 (* COLONEQ *);
  317 (* COLONHASH *);
  318 (* COMMA *);
  319 (* DARROW *);
  320 (* DDARROW *);
  321 (* DOT *);
    0 (* EOF *);
  322 (* EQ *);
  323 (* EQEQ *);
  324 (* EXISTS *);
  325 (* GT *);
  326 (* HASH *);
  327 (* LCURLY *);
  328 (* LCURLYBAR *);
  329 (* LEFTARROW *);
  330 (* LPAREN *);
  331 (* LSQUARE *);
  332 (* LSQUAREBAR *);
  333 (* LT *);
  334 (* RCURLY *);
  335 (* RPAREN *);
  336 (* RSQUARE *);
  337 (* SEMI *);
  338 (* SLASH *);
  339 (* STAR *);
  340 (* TRIANGLE *);
  341 (* USCORE *);
  342 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\006\000\006\000\006\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\004\000\004\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\012\000\012\000\012\000\009\000\009\000\014\000\014\000\015\000\
\015\000\013\000\013\000\017\000\017\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\018\000\018\000\019\000\019\000\020\000\020\000\011\000\
\011\000\021\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\002\000\002\000\002\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\003\000\001\000\001\000\006\000\006\000\006\000\
\006\000\006\000\008\000\004\000\003\000\001\000\002\000\002\000\
\002\000\002\000\003\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\000\000\001\000\001\000\003\000\003\000\
\001\000\003\000\001\000\001\000\003\000\003\000\004\000\001\000\
\001\000\001\000\003\000\007\000\001\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\003\000\003\000\001\000\001\000\
\003\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000\074\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\000\079\000\077\000\
\081\000\000\000\001\000\000\000\000\000\000\000\091\000\000\000\
\003\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\005\000\000\000\000\000\087\000\000\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\019\000\020\000\000\000\021\000\
\000\000\000\000\022\000\023\000\024\000\013\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\026\000\006\000\007\000\
\000\000\075\000\000\000\000\000\070\000\000\000\002\000\000\000\
\057\000\058\000\066\000\009\000\010\000\011\000\000\000\065\000\
\000\000\061\000\000\000\000\000\000\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\086\000\085\000\069\000\000\000\000\000\017\000\000\000\012\000\
\018\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\063\000\030\000\031\000\032\000\
\033\000\034\000\000\000\000\000\089\000\000\000\000\000\000\000\
\076\000\035\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\039\000\040\000\041\000\072\000\075\000\144\000\107\000\108\000\
\145\000\042\000\159\000\043\000\044\000\146\000\147\000\045\000\
\083\000\079\000\080\000\081\000\160\000"

let yysindex = "\023\000\
\001\000\000\000\209\254\213\254\086\004\000\000\000\000\237\254\
\248\004\250\254\086\004\000\000\248\004\248\004\248\004\248\004\
\248\004\248\004\248\004\248\004\248\004\248\004\248\004\248\004\
\248\004\248\004\248\004\231\254\219\254\000\000\000\000\000\000\
\000\000\248\004\000\000\150\004\086\004\253\254\000\000\220\254\
\000\000\145\255\235\254\000\000\028\255\111\005\248\254\249\254\
\000\000\050\255\254\254\001\255\235\254\010\255\052\255\235\254\
\240\004\235\254\235\254\235\254\240\004\240\004\240\004\240\004\
\235\254\240\004\240\004\240\004\240\004\240\004\111\005\000\000\
\111\005\086\004\000\000\235\254\004\255\000\000\251\254\000\000\
\012\255\247\254\000\255\015\255\001\000\205\004\235\254\244\254\
\111\005\000\000\000\000\000\000\000\000\000\000\148\005\000\000\
\148\005\148\005\000\000\000\000\000\000\000\000\074\005\111\005\
\074\005\252\254\000\000\030\255\111\005\111\005\086\004\086\004\
\086\004\111\005\007\255\235\254\235\254\235\254\235\254\235\254\
\235\254\235\254\235\254\235\254\235\254\000\000\000\000\000\000\
\086\004\000\000\150\004\086\004\000\000\086\004\000\000\248\004\
\000\000\000\000\000\000\000\000\000\000\000\000\035\255\000\000\
\017\255\000\000\026\255\018\255\027\255\000\000\148\005\033\255\
\036\255\095\255\090\255\091\255\039\255\060\255\000\000\021\255\
\000\000\000\000\000\000\040\255\111\005\000\000\074\005\000\000\
\000\000\000\000\086\004\086\004\086\004\086\004\086\004\086\004\
\042\255\007\255\092\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\255\067\255\000\000\111\005\086\004\045\255\
\000\000\000\000\056\255\205\004\248\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\255\069\255\000\000\000\000\000\000\
\000\000\000\000\000\000\043\255\000\000\000\000\000\000\000\000\
\000\000\069\004\100\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\000\000\000\000\000\200\000\
\000\000\250\000\044\001\094\001\000\000\000\000\000\000\000\000\
\144\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\001\019\004\000\000\000\000\000\000\
\046\255\044\255\000\000\000\000\000\000\000\000\244\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\255\000\000\
\057\255\000\000\000\000\161\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\002\088\002\138\002\188\002\238\002\
\032\003\082\003\132\003\182\003\232\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\210\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\255"

let yygindex = "\000\000\
\043\000\000\000\026\000\000\000\000\000\232\255\235\255\197\255\
\027\000\172\255\209\255\247\255\000\000\222\255\000\000\000\000\
\003\000\000\000\005\000\000\000\000\000"

let yytablesize = 1761
let yytable = "\053\000\
\035\000\136\000\047\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\090\000\090\000\073\000\106\000\062\000\001\000\
\076\000\090\000\051\000\046\000\074\000\090\000\050\000\062\000\
\087\000\137\000\138\000\140\000\055\000\141\000\142\000\054\000\
\071\000\048\000\084\000\088\000\085\000\089\000\126\000\116\000\
\127\000\109\000\110\000\117\000\118\000\119\000\120\000\111\000\
\121\000\122\000\123\000\124\000\125\000\078\000\082\000\112\000\
\139\000\052\000\113\000\114\000\115\000\129\000\072\000\132\000\
\130\000\131\000\090\000\150\000\072\000\072\000\133\000\148\000\
\134\000\090\000\151\000\158\000\152\000\153\000\072\000\167\000\
\072\000\157\000\090\000\090\000\165\000\090\000\166\000\169\000\
\168\000\171\000\090\000\128\000\172\000\173\000\174\000\175\000\
\176\000\177\000\178\000\188\000\179\000\190\000\191\000\197\000\
\192\000\195\000\072\000\072\000\072\000\072\000\072\000\196\000\
\082\000\025\000\068\000\084\000\060\000\060\000\087\000\135\000\
\072\000\170\000\189\000\149\000\181\000\072\000\163\000\162\000\
\154\000\155\000\156\000\072\000\180\000\000\000\072\000\000\000\
\000\000\072\000\003\000\000\000\000\000\072\000\000\000\000\000\
\006\000\007\000\161\000\000\000\078\000\082\000\000\000\164\000\
\000\000\000\000\028\000\000\000\012\000\193\000\028\000\028\000\
\028\000\028\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\028\000\028\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\087\000\000\000\000\000\049\000\030\000\
\031\000\032\000\033\000\000\000\182\000\183\000\184\000\185\000\
\186\000\187\000\000\000\000\000\086\000\000\000\028\000\028\000\
\028\000\028\000\028\000\000\000\000\000\000\000\000\000\036\000\
\194\000\000\000\037\000\000\000\028\000\038\000\028\000\000\000\
\000\000\028\000\028\000\000\000\000\000\028\000\000\000\028\000\
\000\000\000\000\028\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\006\000\007\000\000\000\000\000\008\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\014\000\015\000\016\000\017\000\000\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\000\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\067\000\000\000\000\000\034\000\067\000\
\067\000\067\000\067\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\067\000\000\000\000\000\067\000\000\000\036\000\
\000\000\000\000\037\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\067\000\067\000\067\000\000\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\067\000\000\000\067\000\
\038\000\000\000\067\000\000\000\038\000\000\000\067\000\038\000\
\067\000\000\000\000\000\067\000\000\000\000\000\067\000\067\000\
\067\000\000\000\067\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\000\000\040\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\038\000\
\000\000\038\000\040\000\000\000\000\000\000\000\040\000\000\000\
\038\000\040\000\038\000\000\000\000\000\038\000\000\000\000\000\
\038\000\038\000\038\000\000\000\038\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\000\000\041\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\040\000\000\000\040\000\041\000\000\000\000\000\000\000\
\041\000\000\000\040\000\041\000\040\000\000\000\000\000\040\000\
\000\000\000\000\040\000\040\000\040\000\000\000\040\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\000\000\044\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\041\000\000\000\041\000\044\000\000\000\
\000\000\000\000\044\000\000\000\041\000\044\000\041\000\000\000\
\000\000\041\000\000\000\000\000\041\000\041\000\041\000\000\000\
\041\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\000\000\045\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\044\000\000\000\044\000\
\045\000\000\000\000\000\000\000\045\000\000\000\044\000\045\000\
\044\000\000\000\000\000\044\000\000\000\000\000\044\000\044\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\000\000\046\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\045\000\
\000\000\045\000\046\000\000\000\000\000\000\000\046\000\000\000\
\045\000\046\000\045\000\000\000\000\000\045\000\000\000\000\000\
\045\000\045\000\045\000\000\000\045\000\000\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\000\000\051\000\000\000\000\000\000\000\051\000\051\000\051\000\
\051\000\046\000\000\000\046\000\051\000\000\000\000\000\000\000\
\051\000\000\000\046\000\051\000\046\000\000\000\000\000\046\000\
\000\000\000\000\046\000\046\000\046\000\000\000\046\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\051\000\051\000\
\051\000\051\000\000\000\042\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\051\000\000\000\051\000\042\000\000\000\
\000\000\000\000\042\000\000\000\051\000\042\000\051\000\000\000\
\000\000\051\000\000\000\000\000\051\000\051\000\051\000\000\000\
\051\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\000\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\042\000\000\000\042\000\
\039\000\000\000\000\000\000\000\039\000\000\000\042\000\039\000\
\042\000\000\000\000\000\042\000\000\000\000\000\042\000\042\000\
\042\000\000\000\042\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\000\000\043\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\039\000\
\000\000\039\000\043\000\000\000\000\000\000\000\043\000\000\000\
\039\000\043\000\039\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\039\000\000\000\039\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\000\000\047\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\043\000\000\000\043\000\047\000\000\000\000\000\000\000\
\047\000\000\000\043\000\047\000\043\000\000\000\000\000\043\000\
\000\000\000\000\043\000\043\000\043\000\000\000\043\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\000\000\048\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\047\000\000\000\047\000\048\000\000\000\
\000\000\000\000\048\000\000\000\047\000\048\000\047\000\000\000\
\000\000\047\000\000\000\000\000\047\000\047\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\000\000\049\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\048\000\000\000\048\000\
\049\000\000\000\000\000\000\000\049\000\000\000\048\000\049\000\
\048\000\000\000\000\000\048\000\000\000\000\000\048\000\048\000\
\048\000\000\000\048\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\000\000\050\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\049\000\
\000\000\049\000\050\000\000\000\000\000\000\000\050\000\000\000\
\049\000\050\000\049\000\000\000\000\000\049\000\000\000\000\000\
\049\000\049\000\049\000\000\000\049\000\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\000\000\053\000\000\000\000\000\000\000\053\000\053\000\053\000\
\053\000\050\000\000\000\050\000\053\000\000\000\000\000\000\000\
\053\000\000\000\050\000\053\000\050\000\000\000\000\000\050\000\
\000\000\000\000\050\000\050\000\050\000\000\000\050\000\000\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\053\000\053\000\
\053\000\053\000\000\000\054\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\053\000\000\000\053\000\054\000\000\000\
\000\000\000\000\054\000\000\000\053\000\054\000\053\000\000\000\
\000\000\053\000\000\000\000\000\053\000\053\000\053\000\000\000\
\053\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\054\000\000\000\055\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\054\000\000\000\054\000\
\055\000\000\000\000\000\000\000\055\000\000\000\054\000\055\000\
\054\000\000\000\000\000\054\000\000\000\000\000\054\000\054\000\
\054\000\000\000\054\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\000\000\056\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\055\000\
\000\000\055\000\056\000\000\000\000\000\000\000\056\000\000\000\
\055\000\056\000\055\000\000\000\000\000\055\000\000\000\000\000\
\055\000\055\000\055\000\000\000\055\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\000\000\052\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\056\000\000\000\056\000\052\000\000\000\000\000\000\000\
\052\000\000\000\056\000\052\000\056\000\000\000\000\000\056\000\
\000\000\000\000\056\000\056\000\056\000\000\000\056\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\052\000\052\000\052\000\
\052\000\052\000\072\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\072\000\052\000\072\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\052\000\000\000\
\000\000\052\000\000\000\000\000\052\000\052\000\052\000\000\000\
\052\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\072\000\072\000\072\000\072\000\072\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\000\000\072\000\000\000\
\072\000\029\000\000\000\072\000\000\000\029\000\000\000\003\000\
\004\000\072\000\005\000\000\000\072\000\006\000\007\000\072\000\
\072\000\008\000\000\000\009\000\010\000\011\000\000\000\000\000\
\000\000\012\000\013\000\000\000\000\000\014\000\015\000\016\000\
\017\000\000\000\000\000\000\000\000\000\018\000\019\000\020\000\
\021\000\022\000\000\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\029\000\049\000\030\000\031\000\032\000\033\000\
\000\000\029\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\029\000\000\000\003\000\
\004\000\000\000\005\000\000\000\036\000\006\000\007\000\037\000\
\000\000\008\000\038\000\009\000\010\000\011\000\000\000\000\000\
\000\000\012\000\013\000\000\000\000\000\014\000\015\000\016\000\
\017\000\000\000\000\000\000\000\000\000\018\000\019\000\020\000\
\021\000\022\000\000\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\000\000\077\000\030\000\031\000\032\000\033\000\
\000\000\000\000\000\000\034\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\000\000\000\000\
\000\000\000\000\009\000\000\000\036\000\000\000\000\000\037\000\
\012\000\013\000\038\000\000\000\014\000\015\000\016\000\017\000\
\000\000\000\000\000\000\000\000\018\000\019\000\020\000\021\000\
\022\000\003\000\023\000\024\000\025\000\026\000\027\000\006\000\
\007\000\003\000\049\000\030\000\031\000\032\000\033\000\006\000\
\007\000\000\000\034\000\012\000\000\000\000\000\000\000\037\000\
\037\000\000\000\000\000\012\000\000\000\000\000\037\000\000\000\
\000\000\000\000\037\000\036\000\000\000\000\000\037\000\000\000\
\000\000\038\000\000\000\000\000\000\000\049\000\030\000\031\000\
\032\000\033\000\000\000\088\000\088\000\049\000\030\000\031\000\
\032\000\033\000\088\000\000\000\000\000\000\000\088\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\037\000\000\000\000\000\038\000\000\000\036\000\037\000\
\000\000\037\000\000\000\000\000\038\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\037\000\
\037\000\000\000\037\000\091\000\092\000\000\000\000\000\000\000\
\000\000\000\000\000\000\088\000\093\000\000\000\000\000\094\000\
\095\000\000\000\088\000\000\000\000\000\096\000\097\000\098\000\
\099\000\000\000\000\000\088\000\088\000\000\000\088\000\000\000\
\000\000\000\000\090\000\000\000\100\000\101\000\102\000\143\000\
\091\000\092\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\093\000\000\000\000\000\094\000\095\000\000\000\000\000\
\000\000\000\000\096\000\097\000\098\000\099\000\000\000\000\000\
\103\000\000\000\000\000\104\000\000\000\000\000\105\000\090\000\
\000\000\100\000\101\000\102\000\000\000\091\000\092\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\000\000\000\
\000\000\094\000\000\000\000\000\000\000\000\000\000\000\096\000\
\000\000\000\000\099\000\000\000\000\000\103\000\000\000\000\000\
\104\000\000\000\000\000\105\000\000\000\000\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\000\000\104\000\000\000\000\000\
\105\000"

let yycheck = "\009\000\
\000\000\086\000\046\001\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\006\001\007\001\058\001\046\000\069\001\001\000\
\034\000\013\001\046\001\075\001\066\001\017\001\005\000\078\001\
\042\000\046\001\047\001\095\000\011\000\097\000\098\000\046\001\
\066\001\085\001\046\001\065\001\081\001\018\001\071\000\057\000\
\073\000\058\001\058\001\061\000\062\000\063\000\064\000\006\001\
\066\000\067\000\068\000\069\000\070\000\036\000\037\000\066\001\
\089\000\085\001\066\001\058\001\017\001\066\001\002\001\081\001\
\078\001\062\001\062\001\080\001\008\001\009\001\079\001\104\000\
\066\001\069\001\053\001\077\001\109\000\110\000\018\001\062\001\
\020\001\114\000\078\001\079\001\058\001\081\001\078\001\069\001\
\079\001\065\001\086\001\074\000\065\001\007\001\013\001\013\001\
\066\001\046\001\086\001\066\001\069\001\018\001\013\001\196\000\
\046\001\069\001\046\001\047\001\048\001\049\001\050\001\064\001\
\078\001\081\001\079\001\078\001\078\001\069\001\136\000\085\000\
\060\001\151\000\178\000\105\000\167\000\065\001\132\000\131\000\
\111\000\112\000\113\000\071\001\165\000\255\255\074\001\255\255\
\255\255\077\001\002\001\255\255\255\255\081\001\255\255\255\255\
\008\001\009\001\129\000\255\255\131\000\132\000\255\255\134\000\
\255\255\255\255\002\001\255\255\020\001\190\000\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\197\000\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\255\255\171\000\172\000\173\000\174\000\
\175\000\176\000\255\255\255\255\060\001\255\255\046\001\047\001\
\048\001\049\001\050\001\255\255\255\255\255\255\255\255\071\001\
\191\000\255\255\074\001\255\255\060\001\077\001\062\001\255\255\
\255\255\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\255\255\255\255\077\001\078\001\079\001\
\080\001\081\001\255\255\255\255\255\255\255\255\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\002\001\255\255\255\255\054\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\255\255\071\001\
\255\255\255\255\074\001\255\255\255\255\077\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\060\001\255\255\062\001\
\013\001\255\255\065\001\255\255\017\001\255\255\069\001\020\001\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\060\001\
\255\255\062\001\013\001\255\255\255\255\255\255\017\001\255\255\
\069\001\020\001\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\060\001\255\255\062\001\013\001\255\255\255\255\255\255\
\017\001\255\255\069\001\020\001\071\001\255\255\255\255\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\060\001\255\255\062\001\013\001\255\255\
\255\255\255\255\017\001\255\255\069\001\020\001\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\060\001\255\255\062\001\
\013\001\255\255\255\255\255\255\017\001\255\255\069\001\020\001\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\060\001\
\255\255\062\001\013\001\255\255\255\255\255\255\017\001\255\255\
\069\001\020\001\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\060\001\255\255\062\001\013\001\255\255\255\255\255\255\
\017\001\255\255\069\001\020\001\071\001\255\255\255\255\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\060\001\255\255\062\001\013\001\255\255\
\255\255\255\255\017\001\255\255\069\001\020\001\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\060\001\255\255\062\001\
\013\001\255\255\255\255\255\255\017\001\255\255\069\001\020\001\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\060\001\
\255\255\062\001\013\001\255\255\255\255\255\255\017\001\255\255\
\069\001\020\001\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\060\001\255\255\062\001\013\001\255\255\255\255\255\255\
\017\001\255\255\069\001\020\001\071\001\255\255\255\255\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\060\001\255\255\062\001\013\001\255\255\
\255\255\255\255\017\001\255\255\069\001\020\001\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\060\001\255\255\062\001\
\013\001\255\255\255\255\255\255\017\001\255\255\069\001\020\001\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\060\001\
\255\255\062\001\013\001\255\255\255\255\255\255\017\001\255\255\
\069\001\020\001\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\060\001\255\255\062\001\013\001\255\255\255\255\255\255\
\017\001\255\255\069\001\020\001\071\001\255\255\255\255\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\255\255\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\060\001\255\255\062\001\013\001\255\255\
\255\255\255\255\017\001\255\255\069\001\020\001\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\255\255\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\009\001\060\001\255\255\062\001\
\013\001\255\255\255\255\255\255\017\001\255\255\069\001\020\001\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\078\001\
\079\001\255\255\081\001\255\255\255\255\255\255\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\060\001\
\255\255\062\001\013\001\255\255\255\255\255\255\017\001\255\255\
\069\001\020\001\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\002\001\255\255\255\255\255\255\006\001\007\001\008\001\
\009\001\060\001\255\255\062\001\013\001\255\255\255\255\255\255\
\017\001\255\255\069\001\020\001\071\001\255\255\255\255\074\001\
\255\255\255\255\077\001\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\046\001\047\001\048\001\
\049\001\050\001\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\018\001\062\001\020\001\255\255\
\255\255\255\255\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\255\255\255\255\086\001\255\255\255\255\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\255\255\
\255\255\255\255\006\001\007\001\255\255\255\255\060\001\255\255\
\062\001\013\001\255\255\065\001\255\255\017\001\255\255\002\001\
\003\001\071\001\005\001\255\255\074\001\008\001\009\001\077\001\
\078\001\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\062\001\046\001\047\001\048\001\049\001\050\001\
\255\255\069\001\255\255\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\078\001\079\001\255\255\081\001\255\255\002\001\
\003\001\255\255\005\001\255\255\071\001\008\001\009\001\074\001\
\255\255\012\001\077\001\014\001\015\001\016\001\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\255\255\054\001\255\255\255\255\002\001\255\255\
\255\255\255\255\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\014\001\255\255\071\001\255\255\255\255\074\001\
\020\001\021\001\077\001\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\002\001\038\001\039\001\040\001\041\001\042\001\008\001\
\009\001\002\001\046\001\047\001\048\001\049\001\050\001\008\001\
\009\001\255\255\054\001\020\001\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\020\001\255\255\255\255\013\001\255\255\
\255\255\255\255\017\001\071\001\255\255\255\255\074\001\255\255\
\255\255\077\001\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\255\255\006\001\007\001\046\001\047\001\048\001\
\049\001\050\001\013\001\255\255\255\255\255\255\017\001\255\255\
\065\001\255\255\255\255\255\255\255\255\255\255\071\001\255\255\
\255\255\074\001\255\255\255\255\077\001\255\255\071\001\062\001\
\255\255\074\001\255\255\255\255\077\001\255\255\069\001\255\255\
\255\255\255\255\255\255\255\255\255\255\004\001\255\255\078\001\
\079\001\255\255\081\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\019\001\255\255\255\255\022\001\
\023\001\255\255\069\001\255\255\255\255\028\001\029\001\030\001\
\031\001\255\255\255\255\078\001\079\001\255\255\081\001\255\255\
\255\255\255\255\004\001\255\255\043\001\044\001\045\001\046\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\255\255\
\071\001\255\255\255\255\074\001\255\255\255\255\077\001\004\001\
\255\255\043\001\044\001\045\001\255\255\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\031\001\255\255\255\255\071\001\255\255\255\255\
\074\001\255\255\255\255\077\001\255\255\255\255\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\071\001\255\255\255\255\074\001\255\255\255\255\
\077\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TBOT\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  CASE\000\
  OF\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  TIMESFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  NAT\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  INV\000\
  RANGE\000\
  SETPRECISION\000\
  ROUND\000\
  UP\000\
  DOWN\000\
  LESS\000\
  URANGE\000\
  UFRAC\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  FRACV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 149 "parser.mly"
      ( fun ctx -> [],ctx )
# 857 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 869 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 159 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 876 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 161 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 884 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 163 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 892 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 168 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 900 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 170 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 908 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 175 "parser.mly"
                ( _1 )
# 915 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 177 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 923 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 179 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 931 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 181 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 939 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 186 "parser.mly"
           ( _2 )
# 948 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 188 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 959 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 194 "parser.mly"
      ( fun ctx -> TyTop )
# 966 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 196 "parser.mly"
      ( fun ctx -> TyBool )
# 973 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 198 "parser.mly"
      ( fun ctx -> TyBot )
# 980 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 200 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 990 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 1000 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 206 "parser.mly"
      ( fun ctx -> TyString )
# 1007 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 208 "parser.mly"
      ( fun ctx -> TyUnit )
# 1014 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 210 "parser.mly"
      ( fun ctx -> TyFloat )
# 1021 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 212 "parser.mly"
      ( fun ctx -> TyNat )
# 1028 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 214 "parser.mly"
      ( fun ctx -> TyRange )
# 1035 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 216 "parser.mly"
      ( fun ctx -> TyFrac )
# 1042 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1048 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 222 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1056 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 228 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 1065 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 230 "parser.mly"
            ( _1 )
# 1072 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 234 "parser.mly"
      ( _1 )
# 1079 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 236 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 1093 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 240 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 1107 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 244 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1119 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1131 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1143 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 250 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1160 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1171 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 258 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1180 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 262 "parser.mly"
      ( _1 )
# 1187 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 264 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1198 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 269 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1207 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 272 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1215 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 274 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1223 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 276 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1232 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 278 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1240 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 280 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1248 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 282 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1256 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 284 "parser.mly"
      ( fun ctx -> TmAdd(_1, _2 ctx, _3 ctx, 8) )
# 1265 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 286 "parser.mly"
      ( fun ctx -> TmSub(_1, _2 ctx, _3 ctx, 8) )
# 1274 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 288 "parser.mly"
      ( fun ctx -> TmMul(_1, _2 ctx, _3 ctx, 8) )
# 1283 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 290 "parser.mly"
      ( fun ctx -> TmDiv(_1, _2 ctx, _3 ctx, 8) )
# 1292 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 292 "parser.mly"
      ( fun ctx -> TmInv(_1, _2 ctx, 8) )
# 1300 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 294 "parser.mly"
      ( fun ctx -> TmLess(_1, _2 ctx, _3 ctx) )
# 1309 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 296 "parser.mly"
      ( fun ctx -> TmSetprecision(_1, _2 ctx, _3 ctx) )
# 1318 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 298 "parser.mly"
      ( fun ctx -> TmRound(_1, _2 ctx, _3 ctx) )
# 1327 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 300 "parser.mly"
      ( fun ctx -> TmUp(_1, _2 ctx, _3 ctx) )
# 1336 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 302 "parser.mly"
      ( fun ctx -> TmDown(_1, _2 ctx, _3 ctx) )
# 1345 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 306 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1355 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1365 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 312 "parser.mly"
      ( _1 )
# 1372 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx i -> [] )
# 1378 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 318 "parser.mly"
      ( _1 )
# 1385 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1392 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 324 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1401 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1410 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 330 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1417 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1426 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 336 "parser.mly"
      ( _1 )
# 1433 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 340 "parser.mly"
      ( _1 )
# 1440 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 342 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1450 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 348 "parser.mly"
      ( _2 )
# 1459 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 350 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1469 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 352 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1477 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 355 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1484 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 357 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1491 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 359 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1501 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 362 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1515 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 365 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1522 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 367 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1529 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 369 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1536 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 371 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1547 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 378 "parser.mly"
      ( fun ctx ->
          let f s =
            let l = String.length s in
            let d = String.index s '.' in
            let ints = String.concat "" [String.sub s 0 d; String.sub s (d+1) (l-d-1)] in
            let w = ref 0 in
            while (!w<(l-1) && ((String.get ints !w)='0')) do
                w:=((!w)+1);
            done;
            if !w=(l-1) then let a = Array.make 1 0 in let fr = TmFrac(_1.i, 1, 0, 1, a) in TmRange(_1.i, fr, fr, TmUnit(_1.i))
            else let l'=l-1 - (!w) in
            let a = Array.make l' 0 in
            for i = 0 to (l'-1) do
                a.(i) <- (int_of_char (String.get ints (l-2-i)) - 48)
            done;
            let fr = TmFrac(_1.i, 1, l-1-d, l', a) in TmRange(_1.i, fr, fr, TmUnit(_1.i))
          in f _1.v
      )
# 1571 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "parser.mly"
      ( fun ctx i -> [] )
# 1577 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 401 "parser.mly"
      ( _1 )
# 1584 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 405 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1591 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 407 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1600 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 411 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1609 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 413 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1616 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 417 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1623 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 419 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1632 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 423 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1647 "parser.ml"
               : 'Case))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
